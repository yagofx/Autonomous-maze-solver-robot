#include <SimpleKalmanFilter.h>

SimpleKalmanFilter front_estimation(0.5, 0.5, 0.01);
SimpleKalmanFilter left_estimation(0.5, 0.5, 0.01);
SimpleKalmanFilter right_estimation(0.5, 0.5, 0.01);

//echo && trig//
int echo_p[] = {2, 3 , 6 }; //echo: front, left, right
int trig_p[] = {4, 5, 11}; //trig: front, left, right

//distances//
float dist[3];   //distance: front, left, right
float t[3];
float d[3];
float d2[3];

//Walls//
int f_w;  //1 = paret , 0 = es pot avançar 
int l_w; //1 = paret , 0 = es pot avançar 
int r_w; //1 = paret , 0 = es pot avançar 
int type_w;

//Motors//
int left_f = 7;
int right_f = 13;

int left_b = 8;
int right_b = 12;

//Position//
bool mov = false;
int ang = 0; // 0 = up; 90 = left; -90 = right; 180 || -180 = down
int x; //pos columns
int y; //pos row
int c_pos[6][6] ={  //current postion in a 6x6 maze
  
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0,
  };

int t_forward = 500; //temps en avançar un cuadrat de 20cm
int t_gir = 500;     //temp en girar 90º sobre ell mateix

//Front distance//
float front_d(){
  digitalWrite(trig_p[0], LOW);
  delayMicroseconds(2);
  digitalWrite(trig_p[0], HIGH);
  delayMicroseconds(10);
  digitalWrite(trig_p[0], LOW);

  t[0] = pulseIn(echo_p[0], HIGH);

  d[0] = t[0] / 58.27505;
  d2[0] = front_estimation.updateEstimate(d[0]);
  
  return d2[0];
}

float left_d(){
  digitalWrite(trig_p[1], LOW);
  delayMicroseconds(2);
  digitalWrite(trig_p[1], HIGH);
  delayMicroseconds(10);
  digitalWrite(trig_p[1], LOW);

  t[1] = pulseIn(echo_p[1], HIGH);

  d[1] = t[1] / 58.27505;
  d2[1] = left_estimation.updateEstimate(d[1]);  

  return d2[1];
  }

float right_d(){
  digitalWrite(trig_p[2], LOW);
  delayMicroseconds(2);
  digitalWrite(trig_p[2], HIGH);
  delayMicroseconds(10);
  digitalWrite(trig_p[2], LOW);

  t[2] = pulseIn(echo_p[2], HIGH);

  d[2] = t[2] / 58.27505;
  d2[2] = right_estimation.updateEstimate(d[2]);  

  return d2[2];
  }

void forward(){
  digitalWrite(left_f, HIGH);
  digitalWrite(right_f, HIGH);
  }

void left(){
  digitalWrite(left_b, HIGH);
  digitalWrite(right_f, HIGH);
  }

void right(){
  digitalWrite(left_f, HIGH);
  digitalWrite(right_b, HIGH);
  }


void setup() {
  pinMode(trig_p[0], OUTPUT);
  pinMode(trig_p[1], OUTPUT);
  pinMode(trig_p[2], OUTPUT);
  pinMode(echo_p[0], INPUT);
  pinMode(echo_p[1], INPUT);
  pinMode(echo_p[2], INPUT);
  pinMode(left_f, OUTPUT);
  pinMode(left_b, OUTPUT);
  pinMode(right_f, OUTPUT);
  pinMode(right_b, OUTPUT);
  x = 3; y = 5;  //initial postion in 6x6 maze
  Serial.begin(115200);
}

void loop() {

  dist[0] = front_d();
  dist[1] = left_d();
  dist[2] = right_d();

  if (dist[0] < 5)
    f_w = 1;
    else 
    f_w = 0;
  if (dist[1] < 5)
    l_w = 1;
    else
    l_w = 0;
  if (dist[2] < 5)
    r_w = 1;
    else
    r_w = 0;

  if (f_w == 0 && l_w == 1 && r_w == 1) //solo puede avanzar
    type_w = 0;
  if (f_w == 1 && l_w == 1 && r_w == 0) //solo derecha
    type_w = 1;
  if (f_w == 1 && l_w == 0 && r_w == 1) //solo izquierda
    type_w = 2;
  if (f_w == 1 && l_w == 0 && r_w == 0) //izquierda o derecha
    type_w = 3;
  if (f_w == 0 && l_w == 1 && r_w == 0) // avançar o derecha
    type_w = 4;
  if (f_w == 0 && l_w == 0 && r_w == 1) // avanzar o izquierda
    type_w = 5;
  if (f_w == 1 && l_w == 1 && r_w == 1) //sin salida
    type_w = 6;
    
  Serial.print(dist[0]);
  Serial.print(", ");
  Serial.print(dist[1]);
  Serial.print(", ");
  Serial.println(dist[2]);

}


